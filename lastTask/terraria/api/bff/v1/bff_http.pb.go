// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.0

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type BffHTTPServer interface {
	GetMonster(context.Context, *GetMonsterRequest) (*GetMonsterReply, error)
	GetWeapon(context.Context, *GetWeaponRequest) (*GetWeaponReply, error)
	ListMonster(context.Context, *ListMonsterRequest) (*ListMonsterReply, error)
	ListWeapon(context.Context, *ListWeaponRequest) (*ListWeaponReply, error)
}

func RegisterBffHTTPServer(s *http.Server, srv BffHTTPServer) {
	r := s.Route("/")
	r.GET("/terraria/bff/v1/monster/{id}", _Bff_GetMonster1_HTTP_Handler(srv))
	r.GET("/terraria/bff/v1/monster", _Bff_ListMonster1_HTTP_Handler(srv))
	r.GET("/terraria/bff/v1/weapon/{id}", _Bff_GetWeapon1_HTTP_Handler(srv))
	r.GET("/terraria/bff/v1/weapon", _Bff_ListWeapon1_HTTP_Handler(srv))
}

func _Bff_GetMonster1_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMonsterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.bff.v1.Bff/GetMonster")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMonster(ctx, req.(*GetMonsterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMonsterReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_ListMonster1_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMonsterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.bff.v1.Bff/ListMonster")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMonster(ctx, req.(*ListMonsterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMonsterReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_GetWeapon1_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWeaponRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.bff.v1.Bff/GetWeapon")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWeapon(ctx, req.(*GetWeaponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWeaponReply)
		return ctx.Result(200, reply)
	}
}

func _Bff_ListWeapon1_HTTP_Handler(srv BffHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWeaponRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.bff.v1.Bff/ListWeapon")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWeapon(ctx, req.(*ListWeaponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWeaponReply)
		return ctx.Result(200, reply)
	}
}

type BffHTTPClient interface {
	GetMonster(ctx context.Context, req *GetMonsterRequest, opts ...http.CallOption) (rsp *GetMonsterReply, err error)
	GetWeapon(ctx context.Context, req *GetWeaponRequest, opts ...http.CallOption) (rsp *GetWeaponReply, err error)
	ListMonster(ctx context.Context, req *ListMonsterRequest, opts ...http.CallOption) (rsp *ListMonsterReply, err error)
	ListWeapon(ctx context.Context, req *ListWeaponRequest, opts ...http.CallOption) (rsp *ListWeaponReply, err error)
}

type BffHTTPClientImpl struct {
	cc *http.Client
}

func NewBffHTTPClient(client *http.Client) BffHTTPClient {
	return &BffHTTPClientImpl{client}
}

func (c *BffHTTPClientImpl) GetMonster(ctx context.Context, in *GetMonsterRequest, opts ...http.CallOption) (*GetMonsterReply, error) {
	var out GetMonsterReply
	pattern := "/terraria/bff/v1/monster/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.bff.v1.Bff/GetMonster"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) GetWeapon(ctx context.Context, in *GetWeaponRequest, opts ...http.CallOption) (*GetWeaponReply, error) {
	var out GetWeaponReply
	pattern := "/terraria/bff/v1/weapon/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.bff.v1.Bff/GetWeapon"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) ListMonster(ctx context.Context, in *ListMonsterRequest, opts ...http.CallOption) (*ListMonsterReply, error) {
	var out ListMonsterReply
	pattern := "/terraria/bff/v1/monster"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.bff.v1.Bff/ListMonster"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BffHTTPClientImpl) ListWeapon(ctx context.Context, in *ListWeaponRequest, opts ...http.CallOption) (*ListWeaponReply, error) {
	var out ListWeaponReply
	pattern := "/terraria/bff/v1/weapon"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.bff.v1.Bff/ListWeapon"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
