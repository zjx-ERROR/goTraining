// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: bff/v1/bff.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BffClient is the client API for Bff service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BffClient interface {
	GetMonster(ctx context.Context, in *GetMonsterRequest, opts ...grpc.CallOption) (*GetMonsterReply, error)
	ListMonster(ctx context.Context, in *ListMonsterRequest, opts ...grpc.CallOption) (*ListMonsterReply, error)
	GetWeapon(ctx context.Context, in *GetWeaponRequest, opts ...grpc.CallOption) (*GetWeaponReply, error)
	ListWeapon(ctx context.Context, in *ListWeaponRequest, opts ...grpc.CallOption) (*ListWeaponReply, error)
}

type bffClient struct {
	cc grpc.ClientConnInterface
}

func NewBffClient(cc grpc.ClientConnInterface) BffClient {
	return &bffClient{cc}
}

func (c *bffClient) GetMonster(ctx context.Context, in *GetMonsterRequest, opts ...grpc.CallOption) (*GetMonsterReply, error) {
	out := new(GetMonsterReply)
	err := c.cc.Invoke(ctx, "/api.bff.v1.Bff/GetMonster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bffClient) ListMonster(ctx context.Context, in *ListMonsterRequest, opts ...grpc.CallOption) (*ListMonsterReply, error) {
	out := new(ListMonsterReply)
	err := c.cc.Invoke(ctx, "/api.bff.v1.Bff/ListMonster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bffClient) GetWeapon(ctx context.Context, in *GetWeaponRequest, opts ...grpc.CallOption) (*GetWeaponReply, error) {
	out := new(GetWeaponReply)
	err := c.cc.Invoke(ctx, "/api.bff.v1.Bff/GetWeapon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bffClient) ListWeapon(ctx context.Context, in *ListWeaponRequest, opts ...grpc.CallOption) (*ListWeaponReply, error) {
	out := new(ListWeaponReply)
	err := c.cc.Invoke(ctx, "/api.bff.v1.Bff/ListWeapon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BffServer is the server API for Bff service.
// All implementations must embed UnimplementedBffServer
// for forward compatibility
type BffServer interface {
	GetMonster(context.Context, *GetMonsterRequest) (*GetMonsterReply, error)
	ListMonster(context.Context, *ListMonsterRequest) (*ListMonsterReply, error)
	GetWeapon(context.Context, *GetWeaponRequest) (*GetWeaponReply, error)
	ListWeapon(context.Context, *ListWeaponRequest) (*ListWeaponReply, error)
	mustEmbedUnimplementedBffServer()
}

// UnimplementedBffServer must be embedded to have forward compatible implementations.
type UnimplementedBffServer struct {
}

func (UnimplementedBffServer) GetMonster(context.Context, *GetMonsterRequest) (*GetMonsterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonster not implemented")
}
func (UnimplementedBffServer) ListMonster(context.Context, *ListMonsterRequest) (*ListMonsterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMonster not implemented")
}
func (UnimplementedBffServer) GetWeapon(context.Context, *GetWeaponRequest) (*GetWeaponReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeapon not implemented")
}
func (UnimplementedBffServer) ListWeapon(context.Context, *ListWeaponRequest) (*ListWeaponReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWeapon not implemented")
}
func (UnimplementedBffServer) mustEmbedUnimplementedBffServer() {}

// UnsafeBffServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BffServer will
// result in compilation errors.
type UnsafeBffServer interface {
	mustEmbedUnimplementedBffServer()
}

func RegisterBffServer(s grpc.ServiceRegistrar, srv BffServer) {
	s.RegisterService(&Bff_ServiceDesc, srv)
}

func _Bff_GetMonster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonsterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BffServer).GetMonster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.bff.v1.Bff/GetMonster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BffServer).GetMonster(ctx, req.(*GetMonsterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bff_ListMonster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMonsterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BffServer).ListMonster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.bff.v1.Bff/ListMonster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BffServer).ListMonster(ctx, req.(*ListMonsterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bff_GetWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeaponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BffServer).GetWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.bff.v1.Bff/GetWeapon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BffServer).GetWeapon(ctx, req.(*GetWeaponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bff_ListWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWeaponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BffServer).ListWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.bff.v1.Bff/ListWeapon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BffServer).ListWeapon(ctx, req.(*ListWeaponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bff_ServiceDesc is the grpc.ServiceDesc for Bff service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bff_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.bff.v1.Bff",
	HandlerType: (*BffServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMonster",
			Handler:    _Bff_GetMonster_Handler,
		},
		{
			MethodName: "ListMonster",
			Handler:    _Bff_ListMonster_Handler,
		},
		{
			MethodName: "GetWeapon",
			Handler:    _Bff_GetWeapon_Handler,
		},
		{
			MethodName: "ListWeapon",
			Handler:    _Bff_ListWeapon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bff/v1/bff.proto",
}
