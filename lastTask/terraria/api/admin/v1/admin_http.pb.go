// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.0

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AdminHTTPServer interface {
	CreateMonster(context.Context, *CreateMonsterRequest) (*CreateMonsterReply, error)
	CreateWeapon(context.Context, *CreateWeaponRequest) (*CreateWeaponReply, error)
	DeleteMonster(context.Context, *DeleteMonsterRequest) (*DeleteMonsterReply, error)
	DeleteWeapon(context.Context, *DeleteWeaponRequest) (*DeleteWeaponReply, error)
	GetMonster(context.Context, *GetMonsterRequest) (*GetMonsterReply, error)
	GetWeapon(context.Context, *GetWeaponRequest) (*GetWeaponReply, error)
	ListMonster(context.Context, *ListMonsterRequest) (*ListMonsterReply, error)
	ListWeapon(context.Context, *ListWeaponRequest) (*ListWeaponReply, error)
	UpdateMonster(context.Context, *UpdateMonsterRequest) (*UpdateMonsterReply, error)
	UpdateWeapon(context.Context, *UpdateWeaponRequest) (*UpdateWeaponReply, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.POST("/terraria/admin/v1/monster", _Admin_CreateMonster0_HTTP_Handler(srv))
	r.PUT("/terraria/admin/v1/monster", _Admin_UpdateMonster0_HTTP_Handler(srv))
	r.DELETE("/terraria/admin/v1/monster/{id}", _Admin_DeleteMonster0_HTTP_Handler(srv))
	r.GET("/terraria/admin/v1/monster/{id}", _Admin_GetMonster0_HTTP_Handler(srv))
	r.GET("/terraria/admin/v1/monster", _Admin_ListMonster0_HTTP_Handler(srv))
	r.POST("/terraria/admin/v1/weapon", _Admin_CreateWeapon0_HTTP_Handler(srv))
	r.PUT("/terraria/admin/v1/weapon", _Admin_UpdateWeapon0_HTTP_Handler(srv))
	r.DELETE("/terraria/admin/v1/weapon/{id}", _Admin_DeleteWeapon0_HTTP_Handler(srv))
	r.GET("/terraria/admin/v1/weapon/{id}", _Admin_GetWeapon0_HTTP_Handler(srv))
	r.GET("/terraria/admin/v1/weapon", _Admin_ListWeapon0_HTTP_Handler(srv))
}

func _Admin_CreateMonster0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMonsterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.Admin/CreateMonster")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMonster(ctx, req.(*CreateMonsterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateMonsterReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateMonster0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMonsterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.Admin/UpdateMonster")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMonster(ctx, req.(*UpdateMonsterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateMonsterReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteMonster0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteMonsterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.Admin/DeleteMonster")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMonster(ctx, req.(*DeleteMonsterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteMonsterReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetMonster0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMonsterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.Admin/GetMonster")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMonster(ctx, req.(*GetMonsterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMonsterReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListMonster0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMonsterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.Admin/ListMonster")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMonster(ctx, req.(*ListMonsterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMonsterReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateWeapon0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateWeaponRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.Admin/CreateWeapon")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateWeapon(ctx, req.(*CreateWeaponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateWeaponReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateWeapon0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateWeaponRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.Admin/UpdateWeapon")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateWeapon(ctx, req.(*UpdateWeaponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateWeaponReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteWeapon0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteWeaponRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.Admin/DeleteWeapon")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteWeapon(ctx, req.(*DeleteWeaponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteWeaponReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetWeapon0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWeaponRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.Admin/GetWeapon")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWeapon(ctx, req.(*GetWeaponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWeaponReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListWeapon0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWeaponRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.admin.v1.Admin/ListWeapon")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWeapon(ctx, req.(*ListWeaponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWeaponReply)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	CreateMonster(ctx context.Context, req *CreateMonsterRequest, opts ...http.CallOption) (rsp *CreateMonsterReply, err error)
	CreateWeapon(ctx context.Context, req *CreateWeaponRequest, opts ...http.CallOption) (rsp *CreateWeaponReply, err error)
	DeleteMonster(ctx context.Context, req *DeleteMonsterRequest, opts ...http.CallOption) (rsp *DeleteMonsterReply, err error)
	DeleteWeapon(ctx context.Context, req *DeleteWeaponRequest, opts ...http.CallOption) (rsp *DeleteWeaponReply, err error)
	GetMonster(ctx context.Context, req *GetMonsterRequest, opts ...http.CallOption) (rsp *GetMonsterReply, err error)
	GetWeapon(ctx context.Context, req *GetWeaponRequest, opts ...http.CallOption) (rsp *GetWeaponReply, err error)
	ListMonster(ctx context.Context, req *ListMonsterRequest, opts ...http.CallOption) (rsp *ListMonsterReply, err error)
	ListWeapon(ctx context.Context, req *ListWeaponRequest, opts ...http.CallOption) (rsp *ListWeaponReply, err error)
	UpdateMonster(ctx context.Context, req *UpdateMonsterRequest, opts ...http.CallOption) (rsp *UpdateMonsterReply, err error)
	UpdateWeapon(ctx context.Context, req *UpdateWeaponRequest, opts ...http.CallOption) (rsp *UpdateWeaponReply, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) CreateMonster(ctx context.Context, in *CreateMonsterRequest, opts ...http.CallOption) (*CreateMonsterReply, error) {
	var out CreateMonsterReply
	pattern := "/terraria/admin/v1/monster"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.admin.v1.Admin/CreateMonster"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateWeapon(ctx context.Context, in *CreateWeaponRequest, opts ...http.CallOption) (*CreateWeaponReply, error) {
	var out CreateWeaponReply
	pattern := "/terraria/admin/v1/weapon"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.admin.v1.Admin/CreateWeapon"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteMonster(ctx context.Context, in *DeleteMonsterRequest, opts ...http.CallOption) (*DeleteMonsterReply, error) {
	var out DeleteMonsterReply
	pattern := "/terraria/admin/v1/monster/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.admin.v1.Admin/DeleteMonster"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteWeapon(ctx context.Context, in *DeleteWeaponRequest, opts ...http.CallOption) (*DeleteWeaponReply, error) {
	var out DeleteWeaponReply
	pattern := "/terraria/admin/v1/weapon/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.admin.v1.Admin/DeleteWeapon"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetMonster(ctx context.Context, in *GetMonsterRequest, opts ...http.CallOption) (*GetMonsterReply, error) {
	var out GetMonsterReply
	pattern := "/terraria/admin/v1/monster/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.admin.v1.Admin/GetMonster"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetWeapon(ctx context.Context, in *GetWeaponRequest, opts ...http.CallOption) (*GetWeaponReply, error) {
	var out GetWeaponReply
	pattern := "/terraria/admin/v1/weapon/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.admin.v1.Admin/GetWeapon"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListMonster(ctx context.Context, in *ListMonsterRequest, opts ...http.CallOption) (*ListMonsterReply, error) {
	var out ListMonsterReply
	pattern := "/terraria/admin/v1/monster"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.admin.v1.Admin/ListMonster"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListWeapon(ctx context.Context, in *ListWeaponRequest, opts ...http.CallOption) (*ListWeaponReply, error) {
	var out ListWeaponReply
	pattern := "/terraria/admin/v1/weapon"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.admin.v1.Admin/ListWeapon"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateMonster(ctx context.Context, in *UpdateMonsterRequest, opts ...http.CallOption) (*UpdateMonsterReply, error) {
	var out UpdateMonsterReply
	pattern := "/terraria/admin/v1/monster"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.admin.v1.Admin/UpdateMonster"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateWeapon(ctx context.Context, in *UpdateWeaponRequest, opts ...http.CallOption) (*UpdateWeaponReply, error) {
	var out UpdateWeaponReply
	pattern := "/terraria/admin/v1/weapon"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.admin.v1.Admin/UpdateWeapon"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
