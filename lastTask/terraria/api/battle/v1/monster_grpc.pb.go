// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: battle/v1/monster.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MonsterClient is the client API for Monster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonsterClient interface {
	CreateMonster(ctx context.Context, in *CreateMonsterRequest, opts ...grpc.CallOption) (*CreateMonsterReply, error)
	UpdateMonster(ctx context.Context, in *UpdateMonsterRequest, opts ...grpc.CallOption) (*UpdateMonsterReply, error)
	DeleteMonster(ctx context.Context, in *DeleteMonsterRequest, opts ...grpc.CallOption) (*DeleteMonsterReply, error)
	GetMonster(ctx context.Context, in *GetMonsterRequest, opts ...grpc.CallOption) (*GetMonsterReply, error)
	ListMonster(ctx context.Context, in *ListMonsterRequest, opts ...grpc.CallOption) (*ListMonsterReply, error)
}

type monsterClient struct {
	cc grpc.ClientConnInterface
}

func NewMonsterClient(cc grpc.ClientConnInterface) MonsterClient {
	return &monsterClient{cc}
}

func (c *monsterClient) CreateMonster(ctx context.Context, in *CreateMonsterRequest, opts ...grpc.CallOption) (*CreateMonsterReply, error) {
	out := new(CreateMonsterReply)
	err := c.cc.Invoke(ctx, "/api.service.v1.Monster/CreateMonster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monsterClient) UpdateMonster(ctx context.Context, in *UpdateMonsterRequest, opts ...grpc.CallOption) (*UpdateMonsterReply, error) {
	out := new(UpdateMonsterReply)
	err := c.cc.Invoke(ctx, "/api.service.v1.Monster/UpdateMonster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monsterClient) DeleteMonster(ctx context.Context, in *DeleteMonsterRequest, opts ...grpc.CallOption) (*DeleteMonsterReply, error) {
	out := new(DeleteMonsterReply)
	err := c.cc.Invoke(ctx, "/api.service.v1.Monster/DeleteMonster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monsterClient) GetMonster(ctx context.Context, in *GetMonsterRequest, opts ...grpc.CallOption) (*GetMonsterReply, error) {
	out := new(GetMonsterReply)
	err := c.cc.Invoke(ctx, "/api.service.v1.Monster/GetMonster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monsterClient) ListMonster(ctx context.Context, in *ListMonsterRequest, opts ...grpc.CallOption) (*ListMonsterReply, error) {
	out := new(ListMonsterReply)
	err := c.cc.Invoke(ctx, "/api.service.v1.Monster/ListMonster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonsterServer is the server API for Monster service.
// All implementations must embed UnimplementedMonsterServer
// for forward compatibility
type MonsterServer interface {
	CreateMonster(context.Context, *CreateMonsterRequest) (*CreateMonsterReply, error)
	UpdateMonster(context.Context, *UpdateMonsterRequest) (*UpdateMonsterReply, error)
	DeleteMonster(context.Context, *DeleteMonsterRequest) (*DeleteMonsterReply, error)
	GetMonster(context.Context, *GetMonsterRequest) (*GetMonsterReply, error)
	ListMonster(context.Context, *ListMonsterRequest) (*ListMonsterReply, error)
	mustEmbedUnimplementedMonsterServer()
}

// UnimplementedMonsterServer must be embedded to have forward compatible implementations.
type UnimplementedMonsterServer struct {
}

func (UnimplementedMonsterServer) CreateMonster(context.Context, *CreateMonsterRequest) (*CreateMonsterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonster not implemented")
}
func (UnimplementedMonsterServer) UpdateMonster(context.Context, *UpdateMonsterRequest) (*UpdateMonsterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonster not implemented")
}
func (UnimplementedMonsterServer) DeleteMonster(context.Context, *DeleteMonsterRequest) (*DeleteMonsterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonster not implemented")
}
func (UnimplementedMonsterServer) GetMonster(context.Context, *GetMonsterRequest) (*GetMonsterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonster not implemented")
}
func (UnimplementedMonsterServer) ListMonster(context.Context, *ListMonsterRequest) (*ListMonsterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMonster not implemented")
}
func (UnimplementedMonsterServer) mustEmbedUnimplementedMonsterServer() {}

// UnsafeMonsterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonsterServer will
// result in compilation errors.
type UnsafeMonsterServer interface {
	mustEmbedUnimplementedMonsterServer()
}

func RegisterMonsterServer(s grpc.ServiceRegistrar, srv MonsterServer) {
	s.RegisterService(&Monster_ServiceDesc, srv)
}

func _Monster_CreateMonster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMonsterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonsterServer).CreateMonster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Monster/CreateMonster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonsterServer).CreateMonster(ctx, req.(*CreateMonsterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monster_UpdateMonster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMonsterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonsterServer).UpdateMonster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Monster/UpdateMonster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonsterServer).UpdateMonster(ctx, req.(*UpdateMonsterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monster_DeleteMonster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMonsterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonsterServer).DeleteMonster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Monster/DeleteMonster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonsterServer).DeleteMonster(ctx, req.(*DeleteMonsterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monster_GetMonster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonsterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonsterServer).GetMonster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Monster/GetMonster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonsterServer).GetMonster(ctx, req.(*GetMonsterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monster_ListMonster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMonsterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonsterServer).ListMonster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.v1.Monster/ListMonster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonsterServer).ListMonster(ctx, req.(*ListMonsterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Monster_ServiceDesc is the grpc.ServiceDesc for Monster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Monster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.service.v1.Monster",
	HandlerType: (*MonsterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMonster",
			Handler:    _Monster_CreateMonster_Handler,
		},
		{
			MethodName: "UpdateMonster",
			Handler:    _Monster_UpdateMonster_Handler,
		},
		{
			MethodName: "DeleteMonster",
			Handler:    _Monster_DeleteMonster_Handler,
		},
		{
			MethodName: "GetMonster",
			Handler:    _Monster_GetMonster_Handler,
		},
		{
			MethodName: "ListMonster",
			Handler:    _Monster_ListMonster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "battle/v1/monster.proto",
}
