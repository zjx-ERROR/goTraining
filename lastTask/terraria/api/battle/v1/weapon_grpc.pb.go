// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: battle/v1/weapon.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WeaponClient is the client API for Weapon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeaponClient interface {
	CreateWeapon(ctx context.Context, in *CreateWeaponRequest, opts ...grpc.CallOption) (*CreateWeaponReply, error)
	UpdateWeapon(ctx context.Context, in *UpdateWeaponRequest, opts ...grpc.CallOption) (*UpdateWeaponReply, error)
	DeleteWeapon(ctx context.Context, in *DeleteWeaponRequest, opts ...grpc.CallOption) (*DeleteWeaponReply, error)
	GetWeapon(ctx context.Context, in *GetWeaponRequest, opts ...grpc.CallOption) (*GetWeaponReply, error)
	ListWeapon(ctx context.Context, in *ListWeaponRequest, opts ...grpc.CallOption) (*ListWeaponReply, error)
}

type weaponClient struct {
	cc grpc.ClientConnInterface
}

func NewWeaponClient(cc grpc.ClientConnInterface) WeaponClient {
	return &weaponClient{cc}
}

func (c *weaponClient) CreateWeapon(ctx context.Context, in *CreateWeaponRequest, opts ...grpc.CallOption) (*CreateWeaponReply, error) {
	out := new(CreateWeaponReply)
	err := c.cc.Invoke(ctx, "/api.battle.v1.Weapon/CreateWeapon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaponClient) UpdateWeapon(ctx context.Context, in *UpdateWeaponRequest, opts ...grpc.CallOption) (*UpdateWeaponReply, error) {
	out := new(UpdateWeaponReply)
	err := c.cc.Invoke(ctx, "/api.battle.v1.Weapon/UpdateWeapon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaponClient) DeleteWeapon(ctx context.Context, in *DeleteWeaponRequest, opts ...grpc.CallOption) (*DeleteWeaponReply, error) {
	out := new(DeleteWeaponReply)
	err := c.cc.Invoke(ctx, "/api.battle.v1.Weapon/DeleteWeapon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaponClient) GetWeapon(ctx context.Context, in *GetWeaponRequest, opts ...grpc.CallOption) (*GetWeaponReply, error) {
	out := new(GetWeaponReply)
	err := c.cc.Invoke(ctx, "/api.battle.v1.Weapon/GetWeapon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weaponClient) ListWeapon(ctx context.Context, in *ListWeaponRequest, opts ...grpc.CallOption) (*ListWeaponReply, error) {
	out := new(ListWeaponReply)
	err := c.cc.Invoke(ctx, "/api.battle.v1.Weapon/ListWeapon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeaponServer is the server API for Weapon service.
// All implementations must embed UnimplementedWeaponServer
// for forward compatibility
type WeaponServer interface {
	CreateWeapon(context.Context, *CreateWeaponRequest) (*CreateWeaponReply, error)
	UpdateWeapon(context.Context, *UpdateWeaponRequest) (*UpdateWeaponReply, error)
	DeleteWeapon(context.Context, *DeleteWeaponRequest) (*DeleteWeaponReply, error)
	GetWeapon(context.Context, *GetWeaponRequest) (*GetWeaponReply, error)
	ListWeapon(context.Context, *ListWeaponRequest) (*ListWeaponReply, error)
	mustEmbedUnimplementedWeaponServer()
}

// UnimplementedWeaponServer must be embedded to have forward compatible implementations.
type UnimplementedWeaponServer struct {
}

func (UnimplementedWeaponServer) CreateWeapon(context.Context, *CreateWeaponRequest) (*CreateWeaponReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWeapon not implemented")
}
func (UnimplementedWeaponServer) UpdateWeapon(context.Context, *UpdateWeaponRequest) (*UpdateWeaponReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWeapon not implemented")
}
func (UnimplementedWeaponServer) DeleteWeapon(context.Context, *DeleteWeaponRequest) (*DeleteWeaponReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWeapon not implemented")
}
func (UnimplementedWeaponServer) GetWeapon(context.Context, *GetWeaponRequest) (*GetWeaponReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeapon not implemented")
}
func (UnimplementedWeaponServer) ListWeapon(context.Context, *ListWeaponRequest) (*ListWeaponReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWeapon not implemented")
}
func (UnimplementedWeaponServer) mustEmbedUnimplementedWeaponServer() {}

// UnsafeWeaponServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeaponServer will
// result in compilation errors.
type UnsafeWeaponServer interface {
	mustEmbedUnimplementedWeaponServer()
}

func RegisterWeaponServer(s grpc.ServiceRegistrar, srv WeaponServer) {
	s.RegisterService(&Weapon_ServiceDesc, srv)
}

func _Weapon_CreateWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWeaponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaponServer).CreateWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.battle.v1.Weapon/CreateWeapon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaponServer).CreateWeapon(ctx, req.(*CreateWeaponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weapon_UpdateWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWeaponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaponServer).UpdateWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.battle.v1.Weapon/UpdateWeapon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaponServer).UpdateWeapon(ctx, req.(*UpdateWeaponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weapon_DeleteWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWeaponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaponServer).DeleteWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.battle.v1.Weapon/DeleteWeapon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaponServer).DeleteWeapon(ctx, req.(*DeleteWeaponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weapon_GetWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeaponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaponServer).GetWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.battle.v1.Weapon/GetWeapon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaponServer).GetWeapon(ctx, req.(*GetWeaponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weapon_ListWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWeaponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaponServer).ListWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.battle.v1.Weapon/ListWeapon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaponServer).ListWeapon(ctx, req.(*ListWeaponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Weapon_ServiceDesc is the grpc.ServiceDesc for Weapon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Weapon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.battle.v1.Weapon",
	HandlerType: (*WeaponServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWeapon",
			Handler:    _Weapon_CreateWeapon_Handler,
		},
		{
			MethodName: "UpdateWeapon",
			Handler:    _Weapon_UpdateWeapon_Handler,
		},
		{
			MethodName: "DeleteWeapon",
			Handler:    _Weapon_DeleteWeapon_Handler,
		},
		{
			MethodName: "GetWeapon",
			Handler:    _Weapon_GetWeapon_Handler,
		},
		{
			MethodName: "ListWeapon",
			Handler:    _Weapon_ListWeapon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "battle/v1/weapon.proto",
}
